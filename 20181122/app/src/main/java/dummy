package com.matchmore.event_without_group

import android.Manifest
import android.content.DialogInterface
import android.content.pm.PackageManager
import android.support.v7.app.AppCompatActivity
import android.os.Bundle
import android.support.v4.app.ActivityCompat
import android.support.v4.content.ContextCompat
import android.support.v7.app.AlertDialog
import android.util.Log
import android.view.View
import android.widget.Toast
import io.matchmore.sdk.Matchmore
import io.matchmore.sdk.api.models.Publication
import io.matchmore.sdk.api.models.Subscription

class live : AppCompatActivity() {

    val MY_PERMISSIONS_REQUEST_LOCATION = 100
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_live)

        checkLocationPermission()
        hideSystemUI()

        subscribe()
        publish()
        getMatches()
    }

    private fun subscribe()
    {
        /* The subscription is used to find the other devices */

        Matchmore.instance.apply {
            startUsingMainDevice ({_->

                //This subscription, used as an acknowledgement will embed the cluster ID in his topic
                //Duration set to 2 days
                val subscription = Subscription("test", 5000.0, 172800.0)
                createSubscriptionForMainDevice(subscription, { result ->
                    Log.d("debug", "Subscription made successfully on topic ${result.topic}")
                }, Throwable::printStackTrace)
            }, Throwable::printStackTrace)
        }
    }

    private fun publish()
    {
        /* The publication is used to share the location of the device */
        Log.d("debug", "create Pub")

        Matchmore.instance.apply {
            startUsingMainDevice ({ _ ->
                //We consider a cluster as being a publication with his ID as a property

                val pub = Publication("test", 5000.0, 5.0)

                createPublicationForMainDevice(pub,
                    { result ->

                        Log.d("debug","Publication made successfully with properties "+pub.properties.toString())
                    }, Throwable::printStackTrace)
            }, Throwable::printStackTrace)
        }
    }

    private fun getMatches ()
    {
        Matchmore.instance.apply {
            //Start fetching matches
            matchMonitor.addOnMatchListener { matches, _ ->
                //We should get there every time a match occur
                Log.d("debug", "We got ${matches.size} matches")
                Log.d("debug", "All the matches "+ matches.toString())

            }
            matchMonitor.startPollingMatches(5000)
        }


    }


    override fun onResume()
    {
        super.onResume()
        checkLocationPermission()

        Matchmore.instance.apply {
            startUpdatingLocation()
            startRanging()
        }
    }

    override fun onPause() {
        super.onPause()

        Matchmore.instance.apply {
            stopUpdatingLocation()
            stopRanging()
        }
    }


    private fun hideSystemUI() {
        window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_IMMERSIVE
                or View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                // Hide the nav bar and status bar
                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                or View.SYSTEM_UI_FLAG_FULLSCREEN)
    }


    private fun checkLocationPermission(): Boolean {
        if (ContextCompat.checkSelfPermission(this,
                Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {

            // Should we show an explanation?
            if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                    Manifest.permission.ACCESS_FINE_LOCATION)) {

                // Show an explanation to the user *asynchronously* -- don't block
                // this thread waiting for the user's response! After the user
                // sees the explanation, try again to request the permission.
                AlertDialog.Builder(this)
                    .setTitle("Location permission")
                    .setMessage("You need the location permission for some things to work")
                    .setPositiveButton("OK", DialogInterface.OnClickListener { dialogInterface, i ->
                        //Prompt the user once explanation has been shown
                        ActivityCompat.requestPermissions(this@live,
                            arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                            MY_PERMISSIONS_REQUEST_LOCATION)
                    })
                    .create()
                    .show()
            } else {
                // No explanation needed, we can request the permission.
                ActivityCompat.requestPermissions(this,
                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), MY_PERMISSIONS_REQUEST_LOCATION)
            }
            return false
        } else {
            return true
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int,
                                            permissions: Array<String>, grantResults: IntArray) {
        when (requestCode) {
            MY_PERMISSIONS_REQUEST_LOCATION -> {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    // permission was granted, yay! Do the
                    // location-related task you need to do.
                    if (ContextCompat.checkSelfPermission(this,
                            Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {

                    }

                } else {
                    Toast.makeText(this,"Permission denied", Toast.LENGTH_LONG)
                }
                return
            }
        }
    }
}
