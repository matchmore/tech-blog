//
// Subscription.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** A subscription can be seen as a JMS subscription extended with the notion of geographical zone. The zone again being defined as circle with a center at the given location and a range around that location.  */
open class Subscription: JSONEncodable {

    /** The id (UUID) of the subscription. */
    public var id: String?
    /** The timestamp of the subscription creation in seconds since Jan 01 1970 (UTC).  */
    public var createdAt: Int64?
    /** The id (UUID) of the world that contains device to attach a subscription to. */
    public var worldId: String?
    /** The id (UUID) of the device to attach a subscription to. */
    public var deviceId: String?
    /** The topic of the subscription. This will act as a first match filter. For a subscription to be able to match a publication they must have the exact same topic.  */
    public var topic: String?
    /** In some cases a develop might want to show the location.  */
    public var location: Location?
    /** This is an expression to filter the publications. For instance &#39;job&#x3D;&#39;developer&#39;&#39; will allow matching only with publications containing a &#39;job&#39; key with a value of &#39;developer&#39;.  */
    public var selector: String?
    /** The range of the subscription in meters. This is the range around the device holding the subscription in which matches with publications can be triggered.  */
    public var range: Double?
    /** The duration of the subscription in seconds. If set to &#39;0&#39; it will be instant at the time of subscription. Negative values are not allowed.  */
    public var duration: Double?
    /** The duration of the match in seconds, this describes how often you will get matches when publication and subscription are moving in each other range. If set to &#39;0&#39; you will get matches every time publication or subscription in range will move. Negative values are not allowed.  */
    public var matchTTL: Double?
    /** When match will occurs, they will be notified on these provided URI(s) address(es) in the pushers array.  */
    public var pushers: [String]?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["id"] = self.id
        nillableDictionary["createdAt"] = self.createdAt?.encodeToJSON()
        nillableDictionary["worldId"] = self.worldId
        nillableDictionary["deviceId"] = self.deviceId
        nillableDictionary["topic"] = self.topic
        nillableDictionary["location"] = self.location?.encodeToJSON()
        nillableDictionary["selector"] = self.selector
        nillableDictionary["range"] = self.range
        nillableDictionary["duration"] = self.duration
        nillableDictionary["matchTTL"] = self.matchTTL
        nillableDictionary["pushers"] = self.pushers?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
