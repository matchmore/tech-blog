//
// PublicationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PublicationAPI: APIBase {
    /**
     Create a publication for a device
     
     - parameter deviceId: (path) The id (UUID) of the device. 
     - parameter publication: (body) Publication to create on a device.  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPublication(deviceId: String, publication: Publication, completion: @escaping ((_ data: Publication?,_ error: Error?) -> Void)) {
        createPublicationWithRequestBuilder(deviceId: deviceId, publication: publication).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a publication for a device
     - POST /devices/{deviceId}/publications
     - examples: [{contentType=application/json, example={
  "duration" : 3.616076749251911,
  "createdAt" : 0,
  "worldId" : "aeiou",
  "topic" : "aeiou",
  "range" : 9.301444243932576,
  "location" : {
    "createdAt" : 6,
    "altitude" : 5.637376656633329,
    "verticalAccuracy" : 7.061401241503109,
    "latitude" : 1.4658129805029452,
    "horizontalAccuracy" : 2.3021358869347655,
    "longitude" : 5.962133916683182
  },
  "id" : "aeiou",
  "deviceId" : "aeiou",
  "properties" : ""
}}]
     
     - parameter deviceId: (path) The id (UUID) of the device. 
     - parameter publication: (body) Publication to create on a device.  

     - returns: RequestBuilder<Publication> 
     */
    open class func createPublicationWithRequestBuilder(deviceId: String, publication: Publication) -> RequestBuilder<Publication> {
        var path = "/devices/{deviceId}/publications"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters = publication.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Publication>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a Publication
     
     - parameter deviceId: (path) The id (UUID) of the device. 
     - parameter publicationId: (path) The id (UUID) of the subscription. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePublication(deviceId: String, publicationId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deletePublicationWithRequestBuilder(deviceId: deviceId, publicationId: publicationId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a Publication
     - DELETE /devices/{deviceId}/publications/{publicationId}
     - 
     
     - parameter deviceId: (path) The id (UUID) of the device. 
     - parameter publicationId: (path) The id (UUID) of the subscription. 

     - returns: RequestBuilder<Void> 
     */
    open class func deletePublicationWithRequestBuilder(deviceId: String, publicationId: String) -> RequestBuilder<Void> {
        var path = "/devices/{deviceId}/publications/{publicationId}"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{publicationId}", with: "\(publicationId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Info about a publication on a device
     
     - parameter deviceId: (path) The id (UUID) of the device. 
     - parameter publicationId: (path) The id (UUID) of the publication. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublication(deviceId: String, publicationId: String, completion: @escaping ((_ data: Publication?,_ error: Error?) -> Void)) {
        getPublicationWithRequestBuilder(deviceId: deviceId, publicationId: publicationId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Info about a publication on a device
     - GET /devices/{deviceId}/publications/{publicationId}
     - examples: [{contentType=application/json, example={
  "duration" : 3.616076749251911,
  "createdAt" : 0,
  "worldId" : "aeiou",
  "topic" : "aeiou",
  "range" : 9.301444243932576,
  "location" : {
    "createdAt" : 6,
    "altitude" : 5.637376656633329,
    "verticalAccuracy" : 7.061401241503109,
    "latitude" : 1.4658129805029452,
    "horizontalAccuracy" : 2.3021358869347655,
    "longitude" : 5.962133916683182
  },
  "id" : "aeiou",
  "deviceId" : "aeiou",
  "properties" : ""
}}]
     
     - parameter deviceId: (path) The id (UUID) of the device. 
     - parameter publicationId: (path) The id (UUID) of the publication. 

     - returns: RequestBuilder<Publication> 
     */
    open class func getPublicationWithRequestBuilder(deviceId: String, publicationId: String) -> RequestBuilder<Publication> {
        var path = "/devices/{deviceId}/publications/{publicationId}"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{publicationId}", with: "\(publicationId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Publication>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all publications for a device
     
     - parameter deviceId: (path) The id (UUID) of the device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublications(deviceId: String, completion: @escaping ((_ data: Publications?,_ error: Error?) -> Void)) {
        getPublicationsWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all publications for a device
     - GET /devices/{deviceId}/publications
     - examples: [{contentType=application/json, example=""}]
     
     - parameter deviceId: (path) The id (UUID) of the device. 

     - returns: RequestBuilder<Publications> 
     */
    open class func getPublicationsWithRequestBuilder(deviceId: String) -> RequestBuilder<Publications> {
        var path = "/devices/{deviceId}/publications"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Publications>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
